using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Movimento : MonoBehaviour
{
    [Header("Referências")]
    private Rigidbody2D oRigidbody2D;
    private Animator oAnimator;

    [Header("Movimento Horizontal")]
    public float velocidadeDoJogador;
    public bool indoParaDireita;

    [Header("Pulo")]
    public bool estaNoChao;
    public float alturaDoPulo;
    public float tamanhoDoRaioDeVerificacao;
    public Transform VerificadorDeChao;
    public LayerMask layerDoChao;

    [Header("Wall Jump")]
    public bool estaNaParede;
    public bool estaPulandoNaParede;
    public float forcaXDoWallJump;

    public float forcaYDoWallJump;
    public Transform VerificadorDeParede;

    [Header("Verificações")]
    public bool jogadorEstaVivo;

    void Awake()
    {
        oRigidbody2D = GetComponent<Rigidbody2D>();
        oAnimator = GetComponent<Animator>();
    }

void Start()
{
    jogadorEstaVivo = true;
}
     
    void Update()
    {
        if(jogadorEstaVivo == true)
        { 
          MovimentarJogador();
          Pular();
          WallJump();
        }
    }

    private void MovimentarJogador()
    {
       // Cuida do Movimento do jogador
        float movimentoHorizontal = Input.GetAxis("Horizontal");

        oRigidbody2D.velocity = new Vector2(movimentoHorizontal * velocidadeDoJogador, oRigidbody2D.velocity.y);

        // Espelha o jogador dependendo de sua direção
        if (movimentoHorizontal > 0)
        {
            transform.localScale = new Vector3(1f, 1f, 1f);
            indoParaDireita = true;
        }
        else if (movimentoHorizontal < 0)
        {
            transform.localScale = new Vector3(-1f, 1f, 1f);
            indoParaDireita = false;
        }

         // Toca as animações do jogador Parado e Andando
        if (movimentoHorizontal == 0 && estaNoChao == true)
        {
            oAnimator.Play("jogador Idle");
        }
        else if(movimentoHorizontal != 0 && estaNoChao == true)
        {
            oAnimator.Play("jogadorAndando");
        }
    }

    private void Pular()
    {
        // Verifica se o jogador está encostando no chão
        estaNoChao = Physics2D.OverlapCircle(VerificadorDeChao.position, tamanhoDoRaioDeVerificacao, layerDoChao);

        // Faz o jogador pular
        if (Input.GetButtonDown("Jump") && estaNoChao == true)
        {
            oRigidbody2D.AddForce(new Vector2(0f, alturaDoPulo), ForceMode2D.Impulse);

        }

        // Toca a animação do jogador pulando
        if(estaNoChao == false)
        {
          oAnimator.Play("jogadorPulando");
        }
    }

    private void WallJump()  
    { 
      // Verifica se o jogador está encostando em uma parede
      estaNaParede = Physics2D.OverlapCircle(VerificadorDeParede.position, tamanhoDoRaioDeVerificacao, layerDoChao);

    // Diz que o jogador está na parede e estápulando 
      if(Input.GetButtonDown("Jump") && estaNaParede == true && estaNoChao == false) 
 {
  estaPulandoNaParede = true;
  }

  // Faz o jogador Pular na parede (ir na direção opoosta dela)
   if(estaPulandoNaParede == true)
{
  if(indoParaDireita == true)

  {
    oRigidbody2D.velocity  = new Vector2(-forcaXDoWallJump, forcaYDoWallJump);
  }
  else
  {
    oRigidbody2D.velocity = new Vector2(forcaXDoWallJump, forcaYDoWallJump);
  }
  
  // Diz para a Unity que o jogador saiu da parede (depois de x segundos)
   Invoke(nameof(DeixarEstarPulandoNaParedeComoFalso), 0.1f);

}
    }

private void DeixarEstarPulandoNaParedeComoFalso()
{
    estaPulandoNaParede = false;
}
}
